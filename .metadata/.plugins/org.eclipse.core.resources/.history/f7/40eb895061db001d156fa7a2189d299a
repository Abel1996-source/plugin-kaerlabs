

import java.awt.Color;
import java.io.File;

import javax.swing.JColorChooser;
import javax.swing.JOptionPane;

import org.json.JSONException;
import org.json.JSONObject;

import ij.IJ;
import ij.ImagePlus;
import ij.gui.*;
import ij.io.OpenDialog;
import ij.io.Opener;
import ij.plugin.PlugIn;
import ij.process.ColorProcessor;
import ij.process.ImageProcessor;
import ij.process.ImageStatistics;


/**
 * 
 * @author KONAN Kouakou Abel
 *
 *Développement de plugin pour le traitemant d'image avec ImageJ/Fiji
 */
public class Kis_Overlay implements PlugIn{

	private File file;
	private ImagePlus image,image1;
	private String json_txt;
	private String json_txt1;
	//int open_braces = 0;
   // int close_braces = 0;
    private String frameId_1,frameId_2;

	@SuppressWarnings("unlikely-arg-type")
	@Override
	public void run(String arg0) {
		
		 JOptionPane.showMessageDialog(null, "Please choose only the substrated image ! click ok to continue!");
		 
		 /**
		 * 	Boite de dialogue
		 */
		 
			OpenDialog dg=new OpenDialog("Open Kis Tiff file",null);
			
			if(dg.getDirectory()==null) {
				return;
			}
			
			file=new File(dg.getDirectory(),dg.getFileName());
			
			if(file==null || file.equals("")) {
				return;
			}
			
			/**--------------------------------------------------------
			 *					 Etude de l'image 1
			 * ---------------------------------------------------------
			 */
			Opener opener =new Opener();
			 image=opener.openImage(file.getAbsolutePath()); 
			if( image == null ) {
		         IJ.showMessage("Error", "Cannot open image, unknown format.");
		         return;
		        }
			
			
			/**
			 * Test sur les deux images 
			 */
			
				  json_txt = image.getProp("ImageDescription");
				  if(json_txt == null ) {
			             IJ.showMessage("Error", "cannot extract meta field from file.");
			             return;}
				 //-------------------FrameID--------------//--
				  
				  frameId_1=frameId_for_Image(json_txt);
				  
			  //--------------------------------------------//-
				  
			/**-----------------------------------------------
			*			 Etude sur l'image 2
		    * -----------------------------------------------
		    */
				  
				  File repertoir=new File(file.getParent().replaceFirst("subtracted", "brightfield"));
		 		 if(repertoir.exists()) {

					  File []files=repertoir.listFiles();
					  if(files==null) {
						  JOptionPane.showMessageDialog(null, "The brightfield folder is empty. Click ok to exit !");
						  return;
					  }
					  
					  for(int i=0;i<files.length;i++) {
						   image1= opener.openImage(files[i].getAbsolutePath());
						  json_txt1 = image1.getProp("ImageDescription");
						    frameId_2=frameId_for_Image(json_txt1);
						    
						   if(frameId_2.equals(frameId_1)) {
							   image1= opener.openImage(files[i].getAbsolutePath());
							   json_txt1 = image1.getProp("ImageDescription");
							   break;
						   }
					  }
		 		 }else {
		 			 
		 			JOptionPane.showMessageDialog(null, "The brightfield folder does not exist. Click ok to exit !");
		 		 }
				  
				  
			/**------------------------------------------------------------------
			 *			 Afichage des images.
			 * ------------------------------------------------------------------
			 */
		 		
			
				//afficher l'image 1
		 		
		 		image=applies_color(image);
		 		image.show();
				ImageWindow win1 = image.getWindow();
				win1.setLocation(0,0);
				
				if(repertoir.exists()) {
					image1.show();//afficher l'image 2
					ImageWindow win2 = image1.getWindow();
					win2.setLocation(500,0);
				}
				/*
			ImagePlus img=	CovertTO_Brightfield_Rgb(image1);
			img.show();
		*/
		
		  	
	}
	
	//----------------------------Les Methodes ----------------------------------//
	
	/**
	 * Méthode pour récuperer le frameId de l'image.
	 */

	@SuppressWarnings("unused")
	public String frameId_for_Image(String json_txt) {
		String frameId = null;
		
		try {
			int open_braces = 0;
		      int close_braces = 0;

		      // Handle missing last char in KC3.0.
		      for( int i1 = 0; i1 < json_txt.length(); i1++ ) {
		      char c = json_txt.charAt(i1);
		      if( c == '{' ) open_braces += 1;
		      if( c == '}' ) close_braces += 1;
		      }
		      if( open_braces != close_braces) {
		         json_txt = json_txt + "}";
		      }
			JSONObject json = new JSONObject(json_txt);
			
			if( json == null ) {
		         IJ.showMessage("Error", "cannot parse meta field from file: no kiscontrol metadata found.");
			}
			 frameId=json.getJSONObject("frame_id").getString("String");
			
			
			
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return frameId;
		
	}
	
	/**
	 *  Méthode de reglage de l'image substrated avant de l'afficher
	 */
	public ImagePlus applies_color(ImagePlus image) {
		
		ImageProcessor ip=image.getProcessor();
		ImageProcessor byteIp = ip.convertToByte(false);
		
		ImageStatistics stats =byteIp.getStatistics();
		byteIp.multiply(255.0/stats.histMax);
		
		//JOptionPane.showMessageDialog(null, "Choose the color for subtracted image !");
		/**
		 * On laisse le choix à l'utilisateur d'appliquer la couleur à l'image subtracted
		 */
		
			//JOptionPane.showMessageDialog(null, str);
			Color color=JColorChooser.showDialog(null, "Choose a color for subtracted image",Color.black );
				//int alpha=color.getAlpha();
				if(color==null) {
					return null;
				}
				int r=color.getRed();
				int g=color.getGreen();
				int b=color.getBlue();			
				
				
				int width=byteIp.getWidth();
				int height=byteIp.getHeight();
		        byte[] pixels = (byte[])byteIp.getPixels();
		        int [] rgbPixels=new int[width*height];
		        for(int y=0;y<height;y++) {
		        	for(int x=0;x<width;x++) {
		        		int index=x+y*width;
		        		int gray=pixels[index] & 0xff;
		        		rgbPixels[index] = ((r*gray/255) << 16 | (g*gray/255) << 8 | (b*gray/255));
		        	}
		        }
		        
		        
		       ColorProcessor ipRGB=new ColorProcessor(width,height,rgbPixels);
		        image.setProcessor(ipRGB);
		
	        return image;
	}

	/**
	 * Fonction permettant de faire la fusion.
	 * @param subtracted_rgb
	 * @param brightfield_rgb
	 * @return Overlay image
	 */
	public ImagePlus Overlay_images(ImagePlus subtracted_rgb,ImagePlus brightfield_rgb) {
		ImagePlus overlay=new ImagePlus();
		
		return overlay;
	}

	public ImagePlus CovertTO_Brightfield_Rgb(ImagePlus brightfield) {
		ImageProcessor ip=brightfield.getProcessor();
		  int width = ip.getWidth();
	        int height = ip.getHeight();
	        int[] pixels = (int[])ip.getPixels();
	        byte[] r = new byte[width * height];
	        byte[] g = new byte[width * height];
	        byte[] b = new byte[width * height];

	        for (int i = 0; i < pixels.length; i++) {
	            int value = pixels[i] & 0xffff;
	            int red = (value >> 8) & 0xff;
	            int green = (value >> 8) & 0xff;
	            int blue = (value >> 8) & 0xff;

	            r[i] = (byte)(red/256); 
	            g[i] = (byte)(green/256);
	            b[i] = (byte)(blue/256);
	        }

	        
	        ColorProcessor cp = new ColorProcessor(width, height);
	        cp.setRGB(r, g, b);
	        ImagePlus brightfield_rgb = new ImagePlus("brightfield rgb", cp);
		
		return brightfield_rgb;
	}
}





