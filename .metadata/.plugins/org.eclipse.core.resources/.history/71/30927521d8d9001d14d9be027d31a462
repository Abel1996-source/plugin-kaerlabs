import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

import org.json.JSONException;
import org.json.JSONObject;

import ij.IJ;
import ij.ImagePlus;
import ij.gui.ImageWindow;
import ij.io.OpenDialog;
import ij.io.Opener;
import ij.plugin.PlugIn;

/**
 * 
 * @author KONAN Kouakou Abel
 *
 *Développement de plugin pour le traitemant d'image avec ImageJ/Fiji
 */
public class Kis_Overlay implements PlugIn{

	private File file;
	private ImagePlus image,image1;
	private String json_txt;
	private String json_txt1;
	int open_braces = 0;
    int close_braces = 0;
    private String frameId_1,frameId_2;

	@SuppressWarnings({ "unlikely-arg-type", "unused" })
	@Override
	public void run(String arg0) {
		// TODO Auto-generated method stub
		
		 JOptionPane.showMessageDialog(null, "Please choose only the substrated image ! click ok to continue!");
		 
		 /**
		 * 	Boite de dialogue
		 */
		 
			OpenDialog dg=new OpenDialog("Open Kis Tiff file",null);
			
			if(dg.getDirectory()==null) {
				return;
			}
			
			file=new File(dg.getDirectory(),dg.getFileName());
			
			if(file==null || file.equals(" ")) {
				return;
			}
			
			/**--------------------------------------------------------
			 *					 Etude de l'image 1
			 * ---------------------------------------------------------
			 */
			Opener opener =new Opener();
			 image=opener.openImage(file.getAbsolutePath()); 
			if( image == null ) {
		         IJ.showMessage("Error", "Cannot open image, unknown format.");
		         return;
		        }
			/**
			 * Test sur les deux images 
			 */
			
				  json_txt = image.getProp("ImageDescription");
				  if(json_txt == null ) {
			             IJ.showMessage("Error", "cannot extract meta field from file.");
			             return;}
				 //-------------------FrameID--------------//--
				  
				  frameId_1=frameId_for_Image(json_txt);
				  
			  //--------------------------------------------//-
				  
			/**-----------------------------------------------
			*			 Etude sur l'image 2
		    * -----------------------------------------------
		    */
				  
				  File repertoir=new File(file.getParent().replaceFirst("subtracted", "brightfield"));
		 		 if(repertoir.exists()) {

					  File []files=repertoir.listFiles();
					  if(files==null) {
						  JOptionPane.showMessageDialog(null, "The brightfield folder is empty. Click ok to exit !");
						  return;
					  }
					  
					  for(int i=0;i<files.length;i++) {
						   image1= opener.openImage(files[i].getAbsolutePath());
						   json_txt1 = image1.getProp("ImageDescription");
						   frameId_2=frameId_for_Image(json_txt1);
						   if(frameId_1.equals(frameId_2)) {
							   image1=opener.openImage(files[i].getAbsolutePath());
							   json_txt1 = image1.getProp("ImageDescription");
							   break;
						   }else {
							   JOptionPane.showMessageDialog(null, "The brightfield image does not exist. Click ok to exit !");
						   }
					  }
		 		 }else {
		 			JOptionPane.showMessageDialog(null, "The brightfield folder does not exist. Click ok to exit !");
		 		 }
				  
				  
			/**------------------------------------------------------------------
			 *			 Afichage des images.
			 * ------------------------------------------------------------------
			 */
			
				image.show();//afficher l'image 1
				ImageWindow win1 = image.getWindow();
				win1.setLocation(0,0);
				
				if(repertoir.exists()) {
					image1.show();//afficher l'image 2
					ImageWindow win2 = image1.getWindow();
					win2.setLocation(500,0);
				}
				
			
		
		
		  	
	}
	
	//--------------------------------------------------------------//
	
	/**
	 * Méthode pour récuperer le frameId de l'image.
	 */

	@SuppressWarnings("unused")
	public String frameId_for_Image(String json_txt) {
		String frameId = null;
		
		try {
			int open_braces = 0;
		      int close_braces = 0;

		      // Handle missing last char in KC3.0.
		      for( int i1 = 0; i1 < json_txt.length(); i1++ ) {
		      char c = json_txt.charAt(i1);
		      if( c == '{' ) open_braces += 1;
		      if( c == '}' ) close_braces += 1;
		      }
		      if( open_braces != close_braces) {
		         json_txt = json_txt + "}";
		      }
			JSONObject json = new JSONObject(json_txt);
			
			if( json == null ) {
		         IJ.showMessage("Error", "cannot parse meta field from file: no kiscontrol metadata found.");
			}
			 frameId=json.getJSONObject("frame_id").getString("String");
			
			
			
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return frameId;
		
	}
}
